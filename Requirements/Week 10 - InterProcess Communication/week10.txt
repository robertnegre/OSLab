The parent process will create for each argument one child process that will handle the options introduced by the user (for each file type we have the corresponding options). Additionally to this child process, the parent process will create a second child process, whose functionality will be:
If the argument is a regular file with the .c extension, the second child will execute a script. The output data of the script will be send to the parent process which will compute a score based on number of errors and warnings
0 errors and 0 warnings: 10
at least one error: 1
no errors, but more than 10 warnings: 2
no errors, but maximum 10 warnings: 2 + 8*(10 â€“ number_of_warnings)/10.
The parent should write the following message in a file named grades.txt: "<FILE_NAME>: <SCORE>".
Script requirement: Having a regular file with the .c extension given as argument, the script should compile the file and print at standard output the number of errors and the number of warnings.
If the argument is a regular file but doesn't have the .c extension, the second child should print the number of lines
If the argument is a directory, the second child process will execute a command for creating a file with the .txt extension and a specific name (e.g. <dir_name>_file.txt, where <dir_name> is the name of the directory)
If the argument is a symbolic link, the second child process will execute a command for changing the permissions of the symbolic link as it follows:
read, write and execution rights for the user
read and write rights for the group (no execution rights should be granted for the group of user!)
no read, write or execution rights for other users
The parent process must properly receive the return state of its child processes and print the following message "The process with PID <PID> has ended with the exit code <EXIT_CODE>".
For each argument, the created processes must run in parallel with each other